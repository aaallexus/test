import React from 'react'
import { act } from "react-dom/test-utils"
import configureStore from 'redux-mock-store'
import { Provider } from 'react-redux'
import {Route} from 'react-router'
import { ConnectedRouter } from 'connected-react-router'
import { createHashHistory,createBrowserHistory/*, createMemoryHistory*/} from 'history'
import { createStore, applyMiddleware,compose} from 'redux'
import axios from 'axios'
import axiosMiddleware from 'redux-axios-middleware'

import { render, unmountComponentAtNode } from "react-dom"

import createRootReducer from '../reducers'
import App from '../components/App'
import Users from '../containers/Users'
import TestComponent from '../components/TestComponent'

import renderWithRouter from '../testTools.js'

const initialState = { users:{caption:"Hello"} };
const mockStore = configureStore();
//let store;

const client = axios.create({
        baseURL: 'http://catalogue.nlu.org.ua/new/rest/api.php',
        responseType: 'json',
});


const history = createBrowserHistory()

const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;

let store = createStore(
      createRootReducer(history),
      composeEnhancers(applyMiddleware(axiosMiddleware(client))),
);

let container = null;
beforeEach(() => {
//    store = mockStore(initialState);
	container = document.createElement("div");
	document.body.appendChild(container);
});

afterEach(() => {
    unmountComponentAtNode(container);
    container.remove();
    container = null;
});


it("Render and Test dummy component", () => {
    act(()=>{
//        render(<Provider store={store}><ConnectedRouter history={history}><App><TestComponent/></App></ConnectedRouter></Provider>, container)
       let asddssd= renderWithRouter(<TestComponent/>);
    })
    expect(container.querySelector("label").textContent).toBe('Hello')
})
it("Render and Test Redux component", () => {
    act(()=>{
     const {getByTestId} =  render(<Provider store={store}><Users/></Provider>,container)
    })
//    expect(container.find(Users).length).toEqual(1);
    expect(container.querySelector("label").textContent).toBe('Hello')


    //expect(document.querySelector('[data-testid="button1"]')).toBeTruthy()
    store = mockStore({ users:{caption:"Hell"}});
    expect(container.querySelector("label").textContent).toBe('Hello')
})
